package org.hisp.dhis.webapi.config;

import org.hisp.dhis.security.SecurityService;
import org.hisp.dhis.security.ldap.authentication.CustomLdapAuthenticationProvider;
import org.hisp.dhis.security.oauth2.DefaultClientDetailsUserDetailsService;
import org.hisp.dhis.security.spring2fa.TwoFactorAuthenticationProvider;
import org.hisp.dhis.user.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

/**
 * @author Morten Svan√¶s <msvanaes@dhis2.org>
 */
@EnableWebSecurity
@Configuration
public class HttpConfig extends WebSecurityConfigurerAdapter
{
    public HttpConfig()
    {
        super( true );
    }

    @Autowired
    private DefaultClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;

    @Autowired
    private UserService userService;
    @Autowired
    private UserDetailsService userDetailsService;
    @Autowired
    private SecurityService securityService;

    @Autowired
    private CustomLdapAuthenticationProvider customLdapAuthenticationProvider;

    @Bean
    public PasswordEncoder encoder()
    {
        return new BCryptPasswordEncoder();
    }

    @Override
    public void configure( AuthenticationManagerBuilder auth )
        throws Exception
    {
        TwoFactorAuthenticationProvider twoFactorAuthenticationProvider = new TwoFactorAuthenticationProvider();
        twoFactorAuthenticationProvider.setPasswordEncoder( encoder() );
        twoFactorAuthenticationProvider.setUserService( userService );
        twoFactorAuthenticationProvider.setUserDetailsService( userDetailsService );
        twoFactorAuthenticationProvider.setSecurityService( securityService );

        // configure the Authentication providers

        auth
            // Two factor
            .authenticationProvider( twoFactorAuthenticationProvider )
            // LDAP Authentication
            .authenticationProvider( customLdapAuthenticationProvider )
            //  OAUTH2
            .userDetailsService( defaultClientDetailsUserDetailsService )
            // Use a non-encoding password for oauth2 secrets, since the secret is generated by the client
            .passwordEncoder( NoOpPasswordEncoder.getInstance() );
    }

//extends WebSecurityConfigurerAdapter
//    @Autowired
//    public void configureGlobal( AuthenticationManagerBuilder auth)
//        throws Exception
//    {
//        auth
//            .inMemoryAuthentication()
//            .withUser("user")  // #1
//            .password("password")
//            .roles("USER")
//            .and()
//            .withUser("admin") // #2
//            .password("password")
//            .roles("ADMIN","USER");
//    }

//    @Override
//    public void configure( WebSecurity web) throws Exception {
//        web
//            .ignoring()
//            .antMatchers("/resources/**"); // #3
//    }

//    @Override
//    protected void configure( HttpSecurity http )
//        throws Exception
//    {
//
//
//        http.authorizeRequests()
//            .antMatchers( "/superadmin/**" ).access( "hasRole('ROLE_SUPER_ADMIN')" )
//            .antMatchers( "/admin/**" ).access( "hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN')" )
//            .antMatchers( "/employee/**" )
//            .access( "hasRole('ROLE_SUPER_ADMIN') or hasRole('ROLE_ADMIN') or hasRole('ROLE_EMPLOYEE')" )
//            .and()
//            .formLogin()
//            .loginPage( "/dashboard/login.html" )
//            .loginProcessingUrl( "/dashboard/process-login.html" )
//            .defaultSuccessUrl( "/dashboard/welcome.html" )
//            .failureUrl( "/dashboard/login.html?error" )
//            .usernameParameter( "username" ).passwordParameter( "password" )
//            .and()
//            .logout()
//            .logoutUrl( "/dashboard/logout.html" )
//            .logoutSuccessUrl( "/dashboard/login.html?logout" ).and()
//            .exceptionHandling()
//            .accessDeniedPage( "/dashboard/accessDenied.html" );
//
////        http
////            .authorizeUrls()
////            .antMatchers("/signup","/about").permitAll() // #4
////            .antMatchers("/admin/**").hasRole("ADMIN") // #6
////            .anyRequest().authenticated() // 7
////            .and()
////            .formLogin()  // #8
////            .loginUrl("/login") // #9
////            .permitAll(); // #5
//    }
}
