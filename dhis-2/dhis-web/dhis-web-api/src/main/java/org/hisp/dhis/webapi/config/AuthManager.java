package org.hisp.dhis.webapi.config;

import org.hisp.dhis.security.spring2fa.TwoFactorAuthenticationProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

/**
 * @author Morten Svan√¶s <msvanaes@dhis2.org>
 */
@Configuration
@Order( 910 )
@ComponentScan( basePackages = { "org.hisp.dhis" } )
@EnableWebSecurity
public class AuthManager
{

//    @Bean( "authenticationManager" )
//    public AuthenticationManager customAuthenticationManager()
//        throws Exception
//    {
//        return authenticationManager();
//    }

    @Bean
    public PasswordEncoder passwordEncoder()
    {
        return new BCryptPasswordEncoder();
    }

//    @Autowired
//    private UserService userService;
//
//    @Autowired
//    private UserDetailsService userDetailsService;

//    @Bean
//    public TwoFactorWebAuthenticationDetailsSource twoFactorWebAuthenticationDetailsSource()
//    {
//        return new TwoFactorWebAuthenticationDetailsSource();
//    }

//    @Autowired
//    @Qualifier("clientDetailsUserService")
//    private ClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;
//

//    @Autowired
//    @Qualifier( "clientDetailsUserService" )
//    private ClientDetailsUserDetailsService defaultClientDetailsUserDetailsService;

    @Autowired
    TwoFactorAuthenticationProvider twoFactorAuthenticationProvider;

    @Autowired
    public void configureGlobal( AuthenticationManagerBuilder auth )
        throws Exception
    {

        auth.authenticationProvider( twoFactorAuthenticationProvider );

//
//
//        twoFactorAuthenticationProvider.setPasswordEncoder( encoder() );
//        twoFactorAuthenticationProvider.setUserService( userService );
//        twoFactorAuthenticationProvider.setUserDetailsService( userDetailsService );
//        twoFactorAuthenticationProvider.setSecurityService( securityService );
//
//        // configure the Authentication providers
//
//        auth
//            // Two factor
//            .authenticationProvider( twoFactorAuthenticationProvider )
//            // LDAP Authentication
////            .authenticationProvider( customLdapAuthenticationProvider )
//            //  OAUTH2
//            .userDetailsService( defaultClientDetailsUserDetailsService )
//            // Use a non-encoding password for oauth2 secrets, since the secret is generated by the client
//            .passwordEncoder( NoOpPasswordEncoder.getInstance() );
    }

//    @Autowired
//    private List<AuthorizationServerConfigurer> configurers = Collections.emptyList();

}
